contributor(context(scope: scriptScope())) {
    method name: 'inv', type: 'void', params: [closure: 'groovy.lang.Closure'], doc: "Creates a new INV object"
    method name: 'repo', type: 'void', params: [closure: 'groovy.lang.Closure'], doc: "Creates a new REPO object"
    method name: 'repo', type: 'void', params: [remoteUrl: 'String'], doc: "Fetch a remote REPO"
    method name: 'simulate', type: 'void', params: [closure: 'groovy.lang.Closure'], doc: "Defines a new simulation context for your test"
    method name: 'debug', type: 'void', params: [object: 'Object'], doc: "Display a new debug message"
}

contributor(context(scope: closureScope())) {

    if (enclosingCall('inv')) {
        //noinspection GroovyAssignabilityCheck
        delegatesTo(findClass('io.peasoup.inv.run.InvDescriptor'))
    }

    if (enclosingCall('repo')) {
        //noinspection GroovyAssignabilityCheck
        delegatesTo(findClass('io.peasoup.inv.repo.RepoDescriptor'))
    }

    if (enclosingCall('simulate')) {
        //noinspection GroovyAssignabilityCheck
        delegatesTo(findClass('io.peasoup.inv.testing.SimulatorDescriptor'))
    }

    if (enclosingCall('resolved')) {
        property name: 'response', type: 'java.lang.Object', doc: 'A generic object withholding the broadcast response'
        property name: 'resolvedBy', type: 'java.lang.String', doc: 'The owner INV name for this response'
    }
}


//noinspection GroovyAssignabilityCheck
contribute(context(ctype: "io.peasoup.inv.run.InvNames")) {

    //name: Name of the method
    //type: The type of the property, give full class name here or the keyword for native types
    property(name: "README", type: 'long')
}

